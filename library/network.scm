(module network racket/base
	(require racket/contract "structure.scm")
	(provide (contract-out
		(receive (box? . -> . bytes?))
		(send (box? bytes? . -> . void?))
		(disconnect (box? . -> . void?))
		(get-packet-id ((or/c bytes? false/c) . -> . (or/c byte? false/c)))
	))
	
	(define (print-dump label data)
		(display label)
		(display (map (lambda (x) (format "~x" x)) (bytes->list data)))
		(newline)
	)
	
	(define (read-buffer port)
		(let ((size (integer-bytes->integer (read-bytes 2 port) #f)))
			(if (> size 2) (read-bytes (- size 2) port) #f)
		)
	)
	(define (write-buffer buffer port)
		(let ((size (+ (bytes-length buffer) 2)))
			(write-bytes (integer->integer-bytes size 2 #f) port)
			(write-bytes buffer port)
			(flush-output port)
		)
	)
	
	(define (receive connection)
		(define input-port (get-box-field connection 'input-port))
		(define crypter (get-box-field connection 'crypter))
	
		(let ((buffer (read-buffer input-port)))
			(print-dump "buffer <-: " buffer)
			(let ((buffer (if crypter (crypter buffer #f) buffer)))
				(print-dump "packet <-: " buffer)
				buffer
			)
		)
	)
	(define (send connection buffer)
		(define output-port (get-box-field connection 'output-port))
		(define crypter (get-box-field connection 'crypter))
		
		(print-dump "packet ->: " buffer)
		(let ((buffer (if crypter (crypter buffer #t) buffer)))
			(print-dump "buffer ->: " buffer)
			(write-buffer buffer output-port)
			(void)
		)
	)
	
	(define (disconnect connection)
		(begin
			(close-input-port (get-box-field connection 'input-port))
			(close-output-port (get-box-field connection 'output-port))
			(void)
		)
	)
	
	(define (get-packet-id buffer)
		(if buffer (bytes-ref buffer 0) #f)
	)
)